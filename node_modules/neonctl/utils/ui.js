// returns the next string if matches the given matcher,
// otherwise returns null
// consumes the line from the lines array
export const consumeNextMatching = (lines, matcher) => {
    while (lines.length > 0) {
        const line = lines.shift().trim();
        if (line === '') {
            continue;
        }
        if (matcher.test(line)) {
            return line;
        }
        return null;
    }
    return null;
};
// returns strings if next non-empty line matches the given matcher,
// otherwise returns empty array
// consumes the lines from the lines array
export const consumeBlockIfMatches = (lines, matcher) => {
    const result = [];
    if (lines.length === 0) {
        return result;
    }
    let line = lines.shift();
    while (line.trim() === '') {
        line = lines.shift();
    }
    if (!matcher.test(line)) {
        lines.unshift(line);
        return result;
    }
    result.push(line);
    while (lines.length > 0) {
        line = lines.shift();
        if (line.trim() === '') {
            break;
        }
        result.push(line);
    }
    return result;
};
export const splitColumns = (line) => {
    const result = line.trim().split(/\s{2,}/);
    result[1] = result[1] ?? '';
    return result;
};
export const drawPointer = (width) => {
    const result = [];
    result.push('└');
    for (let i = 0; i < width - 4; i++) {
        result.push('─');
    }
    result.push('>');
    return result.join('');
};
