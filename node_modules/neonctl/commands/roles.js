import { retryOnLock } from '../api.js';
import { branchIdFromProps, fillSingleProject } from '../utils/enrichers.js';
import { writer } from '../writer.js';
const ROLES_FIELDS = ['name', 'created_at'];
export const command = 'roles';
export const describe = 'Manage roles';
export const aliases = ['role'];
export const builder = (argv) => argv
    .usage('$0 roles <sub-command> [options]')
    .options({
    'project-id': {
        describe: 'Project ID',
        type: 'string',
    },
    branch: {
        describe: 'Branch ID or name',
        type: 'string',
    },
})
    .middleware(fillSingleProject)
    .command('list', 'List roles', (yargs) => yargs, async (args) => await list(args))
    .command('create', 'Create a role', (yargs) => yargs.options({
    name: {
        describe: 'Role name',
        type: 'string',
        demandOption: true,
    },
}), async (args) => await create(args))
    .command('delete <role>', 'Delete a role', (yargs) => yargs, async (args) => await deleteRole(args));
export const handler = (args) => {
    return args;
};
export const list = async (props) => {
    const branchId = await branchIdFromProps(props);
    const { data } = await props.apiClient.listProjectBranchRoles(props.projectId, branchId);
    writer(props).end(data.roles, {
        fields: ROLES_FIELDS,
    });
};
export const create = async (props) => {
    const branchId = await branchIdFromProps(props);
    const { data } = await retryOnLock(() => props.apiClient.createProjectBranchRole(props.projectId, branchId, {
        role: {
            name: props.name,
        },
    }));
    writer(props).end(data.role, {
        fields: ROLES_FIELDS,
    });
};
export const deleteRole = async (props) => {
    const branchId = await branchIdFromProps(props);
    const { data } = await retryOnLock(() => props.apiClient.deleteProjectBranchRole(props.projectId, branchId, props.role));
    writer(props).end(data.role, {
        fields: ROLES_FIELDS,
    });
};
