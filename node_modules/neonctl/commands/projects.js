import { log } from '../log.js';
import { projectCreateRequest, projectUpdateRequest, } from '../parameters.gen.js';
import { writer } from '../writer.js';
import { psql } from '../utils/psql.js';
import { updateContextFile } from '../context.js';
const PROJECT_FIELDS = ['id', 'name', 'region_id', 'created_at'];
const REGIONS = [
    'aws-us-west-2',
    'aws-ap-southeast-1',
    'aws-eu-central-1',
    'aws-us-east-2',
    'aws-us-east-1',
    'aws-il-central-1',
];
const PROJECTS_LIST_LIMIT = 100;
export const command = 'projects';
export const describe = 'Manage projects';
export const aliases = ['project'];
export const builder = (argv) => {
    return argv
        .usage('$0 projects <sub-command> [options]')
        .command('list', 'List projects', (yargs) => yargs, async (args) => {
        await list(args);
    })
        .command('create', 'Create a project', (yargs) => yargs.options({
        name: {
            describe: projectCreateRequest['project.name'].description,
            type: 'string',
        },
        'region-id': {
            describe: `The region ID. Possible values: ${REGIONS.join(', ')}`,
            type: 'string',
        },
        psql: {
            type: 'boolean',
            describe: 'Connect to a new project via psql',
            default: false,
        },
        'set-context': {
            type: 'boolean',
            describe: 'Set the current context to the new project',
            default: false,
        },
    }), async (args) => {
        await create(args);
    })
        .command('update <id>', 'Update a project', (yargs) => yargs.options({
        name: {
            describe: projectCreateRequest['project.name'].description,
            type: 'string',
        },
        'ip-allow': {
            describe: projectUpdateRequest['project.settings.allowed_ips.ips']
                .description,
            type: 'string',
            array: true,
        },
        'ip-primary-only': {
            describe: projectUpdateRequest['project.settings.allowed_ips.primary_branch_only'].description,
            type: 'boolean',
        },
    }), async (args) => {
        await update(args);
    })
        .command('delete <id>', 'Delete a project', (yargs) => yargs, async (args) => {
        await deleteProject(args);
    })
        .command('get <id>', 'Get a project', (yargs) => yargs, async (args) => {
        await get(args);
    });
};
export const handler = (args) => {
    return args;
};
const list = async (props) => {
    const result = [];
    let cursor;
    let end = false;
    while (!end) {
        const { data } = await props.apiClient.listProjects({
            limit: PROJECTS_LIST_LIMIT,
            cursor,
        });
        result.push(...data.projects);
        cursor = data.pagination?.cursor;
        log.debug('Got %d projects, with cursor: %s', data.projects.length, cursor);
        if (data.projects.length < PROJECTS_LIST_LIMIT) {
            end = true;
        }
    }
    writer(props).end(result, { fields: PROJECT_FIELDS });
};
const create = async (props) => {
    const project = {};
    if (props.name) {
        project.name = props.name;
    }
    if (props.regionId) {
        project.region_id = props.regionId;
    }
    const { data } = await props.apiClient.createProject({
        project,
    });
    if (props.setContext) {
        updateContextFile(props.contextFile, {
            projectId: data.project.id,
            branchId: data.branch.id,
        });
    }
    const out = writer(props);
    out.write(data.project, { fields: PROJECT_FIELDS, title: 'Project' });
    out.write(data.connection_uris, {
        fields: ['connection_uri'],
        title: 'Connection URIs',
    });
    out.end();
    if (props.psql) {
        const connection_uri = data.connection_uris[0].connection_uri;
        const psqlArgs = props['--'];
        await psql(connection_uri, psqlArgs);
    }
};
const deleteProject = async (props) => {
    const { data } = await props.apiClient.deleteProject(props.id);
    writer(props).end(data.project, {
        fields: PROJECT_FIELDS,
    });
};
const update = async (props) => {
    const project = {};
    if (props.name) {
        project.name = props.name;
    }
    if (props.ipAllow || props.ipPrimaryOnly != undefined) {
        const { data } = await props.apiClient.getProject(props.id);
        const existingAllowedIps = data.project.settings?.allowed_ips;
        project.settings = {
            allowed_ips: {
                ips: props.ipAllow ?? existingAllowedIps?.ips ?? [],
                primary_branch_only: props.ipPrimaryOnly ??
                    existingAllowedIps?.primary_branch_only ??
                    false,
            },
        };
    }
    const { data } = await props.apiClient.updateProject(props.id, {
        project,
    });
    writer(props).end(data.project, { fields: PROJECT_FIELDS });
};
const get = async (props) => {
    const { data } = await props.apiClient.getProject(props.id);
    writer(props).end(data.project, { fields: PROJECT_FIELDS });
};
