import axios from 'axios';
import { beforeAll, describe, test, jest, afterAll, expect, } from '@jest/globals';
import { mkdtempSync, rmSync, readFileSync } from 'node:fs';
import { startOauthServer } from '../test_utils/oauth_server';
import { runMockServer } from '../test_utils/mock_server';
jest.unstable_mockModule('open', () => ({
    __esModule: true,
    default: jest.fn((url) => {
        axios.get(url);
    }),
}));
// "open" module should be imported after mocking
const authModule = await import('./auth');
describe('auth', () => {
    let configDir = '';
    let oauthServer;
    let mockServer;
    beforeAll(async () => {
        configDir = mkdtempSync('test-config');
        oauthServer = await startOauthServer();
        mockServer = await runMockServer('main');
    });
    afterAll(async () => {
        rmSync(configDir, { recursive: true });
        await oauthServer.stop();
        await new Promise((resolve) => mockServer.close(resolve));
    });
    test('should auth', async () => {
        await authModule.authFlow({
            _: ['auth'],
            apiHost: `http://localhost:${mockServer.address().port}`,
            clientId: 'test-client-id',
            configDir,
            forceAuth: true,
            oauthHost: `http://localhost:${oauthServer.address().port}`,
        });
        const credentials = JSON.parse(readFileSync(`${configDir}/credentials.json`, 'utf-8'));
        expect(credentials.access_token).toEqual(expect.any(String));
        expect(credentials.refresh_token).toEqual(expect.any(String));
        expect(credentials.user_id).toEqual(expect.any(String));
    });
});
